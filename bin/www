#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tablamultiplicar:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);

// Inicializa Socket.io
io.on('connection', (socket) => {
  console.log('Nuevo cliente conectado');

  // Manejar la solicitud de generaci칩n de quiniela
  socket.on('generarQuiniela', () => {
    const quiniela = generarQuiniela(); 
    io.emit('quinielaGenerada', quiniela);
  });

});
// Funci칩n para generar una quiniela aleatoria
function generarQuiniela() {
  // Implementa tu l칩gica para generar la quiniela (ejemplo b치sico)
  const quiniela = [];
  for (let i = 0; i < 15; i++) {
    const resultado = Math.random() < 0.33 ? '1' : (Math.random() < 0.5 ? 'X' : '2');
    quiniela.push(resultado);
  }
  return quiniela;
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
